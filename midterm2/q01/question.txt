A purely functional language does not permit functions with side-effects. However, a realistic program cannot survive without side-effects. What do pure-functional languages do to get around these concerns? Explain.

Purely functional languages get around side-effect actions by using monad. Monad is a special concept which can be used to make a sequence of actions implicit. As we know that pure actions can be executed in any order without affecting their results because pure functions only produce output strictly based on the inputs given. On the other hand, impure actions (actions with side-effects) cannot be safely executed in any order. So by using monad, impure actions can be chained in an implicit way which makes the actions more predictable and controllable. By making impure actions predictable, monad helps to achieve benefits as close to the benefits of pure actions as possible. 
For example, suppose that we have some impure actions as below: 
Action1: read an integer from a keyboard
 Action2: read another integer from keyboard
 Action3: show difference between the first integer and the second one

 As we can see that if Action2 is executed first, the result will be wrong (example: 3 - 5 is not the same as 5 -3). The correct sequence of actions is: Action1 -> Action2 -> Action3.

So in this case, a monad can be used to enforce the rule as below: m a -> ((a, m b) -> m c) -> m c.  In this case, m is type constructor, and (m a) is an IO integer action that returns an integer. That integer will then be piped to another function which takes in an integer and another IO integer action. Then finally, an IO integer action which writes the integer result to the output console is returned.
