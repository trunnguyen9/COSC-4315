How does Clojure support infinite sequences?

Clojure supports infinite sequences by providing the programmers with the keywords "lazy-seq" and "take". "Lazy-seq" postponses computation until needed. “Take” allows the programmers to specify when they want the computation to stop.

Let take a look at an example below for further clarification:
(def fact
	([]
		(concat [1] (fact 1 2)))
	([p n]
		(let [product (* p n)]
		(let [nextValue (+ n 1)]
		(lazy-seq
			(cons prod (fact prod nextValue)))))
	)
)
When this function begins, it will concat the number 1 to whatever sequence returned from (fact 1 2). Then, the function continues to the second block where p = 1, and n = 2. At this time, it will save the product of p and n in the variable product, and incremented n by 1, and save that result in the variable nextValue. Then it will continue to compute the factorial sequence of prod and nextValue. 

Now, without the key word lazy-seq, upon invoked, this function will run forever or until the computer crashes.With the key word lazy-seq, the computation just goes as further as needed. So, if a programmer write (println (take 10 (fact))), it will print out the first 10 factorial numbers.