Homework 2: Due 11:59PM October 16

What is referential transparency? Discuss. What are the benefits. Give examples.

Answer:

An expression is referentially transparent if it can be replaced with its value without changing the semantic of the program. No matter where it is located, and how many times it is called, referentially transparent has the same value and the same behavior.   

An example of referential transparent expressions is the expression 1 + 1 . 1 + 1 always yield 2 in any context. So this expression can be replaced by 2, and the replacement will not change the behavior of the program that uses it. 

On the other hand, the expression x = x + 1 is not referentially transparent. Suppose that x equals 1 initially. The first call of the expression will make x equal 2. The second call will make x equal 3. Obviously, the expression itself cannot be replaced by its evaluated value. The program that uses this expression will get different result with different call of the expression.

Referential transparent is an important property made use by functional programming, which makes it easier to reason about the behavior of programs. This can help proving correctness, simplifying an algorithm and assisting in modifying code without breaking it.

One of the benefits of referential transparent is that parallelization. As function results are independent, they can execute on other machines or other processes.

In additional, the benefit of referential transparent is memorization. Since function call is equivalent to value, they can be cached.

Another benefit of referential transparent is that make it easier to apply program transformations including optimizations and partial evaluations at compile-time.

Finally, the benefit of referential transparent is ease of debugging because each function can be tested independently.





https://en.wikipedia.org/wiki/Referential_transparency_(computer_science)
http://faculty.ycp.edu/~dhovemey/fall2012/cs340/lecture/lecture18.html
http://www.tnkcs.inf.elte.hu/vedes/Divianszky_Peter_Tezisek_en.pdf

Total [10]: 10
